/************************************/
Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0

/************************************/
class Solution {
public:
	vector<vector<int>>imageSmoother(vector<vector<int>>&M) {

		int rows = M.size();
		cout << "rows:" << rows << endl;
		int cols = M[0].size();
		cout << "cols:" << cols << endl;
		vector<vector<int>>result(rows, vector<int>(cols));
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				int sum = 0;
				int count = 0;

				for (int x = max(0, i - 1); x <= min(rows - 1, i + 1); x++)
				{
					for (int y = max(0, j - 1); y <= min(cols - 1, j + 1); y++)
					{
						sum += M[x][y];
						count++;
					}
						
					}
				result[i][j]=sum / count;
				}
		}
				return result;
			
		}
};
	
