/************************/

Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]





/********************/
this is  my original code
It's too complicated
/*******************/
class Solution {
public:
	vector<vector<int>> generate(int numRows) {
		vector<vector<int>>result;
		if (numRows == 0) {
			return result;
		}
		
		for (int i = 1; i <= numRows; i++) {
			
			result.push_back(gen(i));

		}
		return result;
	}

	vector<int>gen(int numRows) {
		vector<int>result;
		if (numRows == 1) {
			result.push_back(1);
			return result;
		}
		if (numRows == 2) {
			result.push_back(1);
			result.push_back(1);
			return result;
		}
		for (int i = 1; i < numRows-1; i++) {
			
			int t = gen(numRows - 1)[i-1] + gen(numRows - 1)[i ];
			
			
			result.push_back(t);
		}
		result.insert(result.begin(), 1);
		result.insert(result.end(), 1);
		
		
		return result;
	}
};

/************************/
This the improved version
/***********************/
class Solution {
public:
	vector<vector<int> > generate(int numRows) {
		vector<vector<int> > result;
		if (numRows <= 0) return result;
		result.assign(numRows, vector<int>(1));
		for (int i = 0; i < numRows; ++i) {
			result[i][0] = 1;
			if (i == 0) continue;
			for (int j = 1; j < i; ++j) {
				result[i].push_back(result[i - 1][j] + result[i - 1][j - 1]);//Thinking is very important.
			}
			result[i].push_back(1);
		}
		return result;
	}
};
/********************/
