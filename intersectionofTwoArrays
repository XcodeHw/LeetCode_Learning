/********************************/

Given two arrays, write a function to compute their intersection.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Note:

Each element in the result must be unique.
The result can be in any order.
 

/*******************************/

class Solution {
public:
	vector<int>intersection(vector<int>&nums1, vector<int>&nums2) {
		vector<int>res;
		unordered_map<int,int>mpp;
		unordered_map<int, int>mpp2;
		int size = nums1.size();
		for (int i = 0; i < size; i++) {
			mpp[nums1[i]] = 1;
		}
		int size2 = nums2.size();
			for(int i = 0; i < size2; i++) {
				if (mpp.count(nums2[i]) != 0) {
					mpp2[nums2[i]] = 0;
				}
		}

			for (std::unordered_map<int, int>::iterator it = mpp2.begin(); it != mpp2.end(); ++it) {
				int key = it->first;
				res.push_back(key);
			}
			return res;
	}
};
