/********************************/
Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:
The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integer’s binary representation.
Example 1:
Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:
Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to outp


/*******************************/

#include"stdafx.h"
#include<iostream>
using namespace std;
/*
　要找的这个掩码的特征应该是这个样子的。5的二进制是101，只占3个bit，那么这个掩码的最后3个bit要是0，其余全部是1。如下所示：
 　　5：0000 0101
   　　掩码：1111 1000
	 第二步：分别取反
	 　　~5 ：1111 1010
	   　　~掩码：0000 0111
		 第三步：相与
		 ~5 & ~掩码 = 0000 0010

*/
class Solution {
public:
	int findComplement(int num) {
		unsigned yanma = ~0;
		while (num&yanma) {
			yanma <<= 1;
		}
	
		return ~num&~yanma;
	}
};
//int main() {
//	Solution s;
//	s.findComplement(5);
//	system("pause");
//}
