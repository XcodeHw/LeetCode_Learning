/************************Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < N and N % x == 0.
Replacing the number N on the chalkboard with N - x.
Also, if a player cannot make a move, they lose the game.

Return True if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:

Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.**********************/
Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < N and N % x == 0.
Replacing the number N on the chalkboard with N - x.
Also, if a player cannot make a move, they lose the game.

Return True if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:

Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.

/***********************************************/
class Solution {
public:
	bool divisorGame(int N) {
		
		if (N == 1) {
			return false;
		}
		int count = 0;
		int flag = 0;
		while (N > 1) {
			for (int i = 1; i < N; i++) {
				if (N%i == 0) {
					N = N - i;
					count++;
					flag = 1;
					break;
				}
			}
			if (flag == 0) {
				break;
			}
		}
		if (count % 2 == 0) {
			return false;
		}
		return true;
	}
};
///////////////////////////
public boolean divisorGame(int N) {
        
    return (N & 1) == 0;
}
