Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

class Solution {
public:
	ListNode * mergeTwoLists(ListNode* l1,ListNode *l2) {
		
		ListNode *merge = new ListNode{ 0 };

		ListNode *head=merge;
		
		while (l1&&l2) {
			if (l1->val < l2->val) {
				head->next = l1;
				l1 = l1->next;

			}
			else {
				head->next = l2;
				l2 = l2->next;
			}
			head = head->next;
		}
		head->next = l1 ? l1 : l2;
		return merge->next;
	}
};

int main()
{
	
	ListNode *h = new ListNode{0};
	ListNode *h1 = new ListNode{ 6 };
	ListNode *p;
	ListNode *p1;
	p = h;
	p1 = h1;
	
	for(int i=1;i<5;i++){
		ListNode *q = new ListNode{i};
		p->next =q;
		p= q;
		
	}
	for (int i = 7; i < 12; i++) {
		ListNode *q = new ListNode{ i };
		p1->next = q;
		p1 = q;
	}
	
	Solution s;
	ListNode *re;
	re=s.mergeTwoLists(h,h1);
	while (re!=NULL) {
		cout << re->val << "->";
		re = re->next;
	}
	system("pause"); 
}


There's nothing to tell about It's too simple. Just pay attention to details.
