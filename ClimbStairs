///You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.



///
class Solution {
public:
	int climbStairs(int n) {
		if (n == 1) {
			return 1;
		}
		if (n == 2) {
			return 2;
		}
		int result = 0;
		result = climbStairs(n - 2)  +climbStairs(n - 1);


			return result;
	}
};///我 think it can pass but it it out of time ，recursion is not good so i used dynamic programming algorithm
//

class Solution {
public:
	int climbStairs(int n) {
		if (n == 1) {
			return 1;
		}
		if (n == 2) {
			return 2;
		}
		int p1 = 1;
		int p2 = 2;
		for (int i = 0; i < n - 2; i++) {
			int sum = p1 + p2;
			p1 = p2;
			p2 = sum;
		}
		return p2;
	}
};
