//*************************************//
Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Example:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false




//************************************//


class MyQueue {
public:
	stack<int> s1, s2;
	MyQueue() {

	}
	void push(int x) {

		s1.push(x);
	}
	int pop() {
	int temp;
	if (s2.empty()) {
		while (!s1.empty()) {
			temp = s1.top();
			s2.push(temp);
			s1.pop();
		}
	}
	int result = s2.top();
	s2.pop();
	return result;
	}
	int peek() {
		while (!s1.empty()) {
			s2.push(s1.top());
			s1.pop();
		}
		int temp= s2.top();
		while (!s2.empty()) {
			int val = s2.top();
			s1.push(val);
			s2.pop();
		}
		return temp;
	}
	bool empty() {
		return s2.empty()&&s1.empty();
	}
};
