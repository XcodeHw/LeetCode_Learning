/********************************************/
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13


/*********************************************/
class Solution {
private:int rightSum = 0;
public:
	
	TreeNode * convertBST(TreeNode * root) {
		if (root == NULL) {
			return root;
		}
		convertBST(root->right);
		root->val= root->val + rightSum;
		rightSum = root->val;
		convertBST(root->left);
		return root;
	}
};
