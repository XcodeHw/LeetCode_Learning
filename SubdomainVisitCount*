/**********************************************/

/**********************************************/
class Solution {
public:
	vector<string>subdomainVisits(vector<string>&cpdomains) {
		int size = cpdomains.size();
		map<string, int>mp;
		
	for (int i = 0; i < size; i++) {
		vector<string>num=findIndex(cpdomains[i]);
		
		int n = reNum(cpdomains[i]);
		
		for (int j = 0; j < num.size(); j++) {
			if (mp.count(num[j]) == 0) {
				mp[num[j]] = n;
			}
			else {
				mp[num[j]] = n + mp[num[j]];
			}
		}
		
		}
		vector<string>result;
		map<string, int>::iterator iter;
		iter = mp.begin();
		while (iter != mp.end()) {
			string d = to_string(iter->second);
			
			result.push_back(d + " " + iter->first);
			iter++;
		}
		
		return result;
	}
	int reNum(string nums) {
		int nsize = nums.size();
		int ind = 0;
		for (int i = 0; i < nsize; i++) {
			if (nums[i] == ' ') {
				ind = i;
			}
		}
		string s = nums.substr(0, ind);
		int n = atoi(s.c_str());
		return n;
	}
	vector<string>findIndex(string nums) {
		vector<int>res;
		vector<string>re;
		int ind = 0;
		int nsize = nums.size();
		for (int i = 0; i < nsize; i++) {
			if (nums[i] == ' ') {
				ind = i;
			}
		}

		string s = nums.substr(ind + 1,nsize-ind-1);
		re.push_back(s);
		int size = s.size();
		for (int i = 0; i < size; i++) {
			if (s[i] == '.') {
				res.push_back(i);
			}
		}
		
		for (int i = 0; i < res.size(); i++) {
			string sub1 = s.substr(res[i] + 1, size - res[i] - 1);
			re.push_back(sub1);
		}

		
	
		return re;
	}
};
