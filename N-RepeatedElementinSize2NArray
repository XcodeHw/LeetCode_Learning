/************************************/
In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.

Return the element repeated N times.

 

Example 1:

Input: [1,2,3,3]
Output: 3
Example 2:

Input: [2,1,2,5,3,2]
Output: 2
Example 3:

Input: [5,1,5,2,5,3,5,4]
Output: 5
 

Note:

4 <= A.length <= 10000
0 <= A[i] < 10000
A.length is even
/************************************/
class Solution {
public:
	int repeatedNTimes(vector<int>&A) {
		map<int,int>mpp;
		for (int i = 0; i < A.size(); i++) {
			if (mpp.count(A[i]) == 0) {
				mpp[A[i]] = 1;
			}
			else {
				mpp[A[i]]++;
			}
		}
        int temp=0;
		map<int, int>::iterator iter;
		iter = mpp.begin();
		while (iter != mpp.end()) {
			if (iter->second == A.size() / 2) {
                temp=iter->first;
				return iter->first;
			}
			else {
				iter++;
			}
		}
        return temp;
	}
};
