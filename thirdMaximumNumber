/************************************/
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

/**********************************/
class Solution {
public:
	int thirdMax(vector<int>&nums) {
		int temp = getMax(nums);
		int size = nums.size();
		if (size <= 2) {
			return temp;
		}
		
		nums=removeMax(nums,temp);
		//第一次后
		int size2 = nums.size();
		if (size2 <2) {
			return temp;
		}
		int temp2 = getMax(nums);
		nums = removeMax(nums, temp2);
		int size3 = nums.size();
		if (size3 <1) {
			return temp;
		}
		int temp3 = getMax(nums);
		
		return temp3;
	}
	vector<int>removeMax(vector<int>&nums,int temp) {
		vector<int>::iterator it;
		for (it = nums.begin(); it != nums.end();) {
			if (*it == temp) {
				it = nums.erase(it);
			}
			else {
				++it;
			}
		}
		return nums;
	}

	int getMax(vector<int>re) {
		int max = re[0];
		int size = re.size();
		for (int i = 0; i < size; i++) {
			if (re[i] > max) {
				max = re[i];
			}
		}
		return max;
	}
};
