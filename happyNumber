/***********************************/

Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
/*******************/
//mycode is time out 0.0

class Solution {
public:
	bool isHappy(int n) {
		if (n == 1) {
			return true;
		}
		int sum = nextSum(n);
		while (sum!=n&&sum!=1) {
			
				sum = nextSum(sum);
			}
		return sum == 1;
		}
	

	int nextSum(int n) {
		int nextSum = 0, temp;
		while (n) {
			temp = n % 10;
			nextSum += temp * temp;
			n /= 10;
		}
		return nextSum;
	}
};
//
so i find it can be improved 
//
class Solution {
public:
	bool isHappy(int n) {
		if (n == 1) {
			return true;
		}
		int sum = nextSum(n);
		int sum2 = n;
		while (sum!=sum2&&sum!=1) {
			sum = nextSum(sum);
				sum = nextSum(sum);
				sum2 = nextSum(sum2);
			}
		return sum == 1;
		}
	

	int nextSum(int n) {
		int nextSum = 0, temp;
		while (n) {
			temp = n % 10;
			nextSum += temp * temp;
			n /= 10;
		}
		return nextSum;
	}
};
