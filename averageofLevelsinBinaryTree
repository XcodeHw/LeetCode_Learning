/*****************************************/
Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.

/*****************************************/
#include"stdafx.h"
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) :val(x), left(NULL), right(NULL) {}
};
class Solution {
private:vector<double>result;
public:
	vector<double>averageOfLevels(TreeNode *root) {
		
		vector<double> ret;
		queue<TreeNode*> que;
		que.push(root);
		while (!que.empty()) 
		{
			int size = que.size(); 
			double level = 0;
			for (int i = 0; i < size; ++i)
			{
				TreeNode* node = que.front(); 
				que.pop(); 
				level += node->val;
				if (node->left) que.push(node->left);
				if (node->right) que.push(node->right);
			}
			ret.push_back(level / size);
		}
		return ret;

	}

};
