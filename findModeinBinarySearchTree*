/********************************/
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
For example:
Given BST [1,null,2,2],
   1
    \
     2
    /
   2
return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).




/*****************************/
class Solution {
public:
	vector<int>res;
	int mx = 0, cnt = 1;

	vector<int>findMode(TreeNode *root) {
		TreeNode *pre = NULL;
		inorder(root, pre);
		return res;
	}
	void inorder(TreeNode *node, TreeNode *&pre) {
		if (!node) {
			return;
		}
		inorder(node->left, pre);
		if (pre) {
			cnt = (node->val == pre->val) ? cnt + 1 : 1;
		}
		if (cnt >= mx) {
			if (cnt > mx) {
				res.clear();
			}
			res.push_back(node->val);
			mx = cnt;
		}
		pre = node;
		inorder(node->right, pre);
	}
};
