/************************************/

Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...

Note:
n is positive and will fit within the range of a 32-bit signed integer (n < 231).

Example 1:

Input:
3

Output:
3
Example 2:

Input:
11

Output:
0

Explanation:
The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.
/***********************************/

#include<iostream>
#include<math.h>
using namespace std;
class Solution {
public:
	int findNthDigit(int n) {
		if (n < 10) {
			return n;
		}
		long  max = 9;
		int min = 1;
		int digits = 1;
		while (n > max) {
			digits++;
			min = max;
			max += 9 * pow(10, digits - 1)*digits;
		}
		int start = pow(10, digits - 1);
		int del = n - min - 1;
		start += del / digits;
		int index = del % digits;
		
		return (start / (int)pow(10, (digits - index - 1))) % 10;


	}
};
/(************************)*/
0
class Solution {
public:
    int findNthDigit(int n) {
        long long b=1LL,cnt=9LL;
        while(cnt*b<n){
            n-=cnt*b;
            cnt*=10;
            b++;
        }
        long long base=pow(10,b-1);
        long long num=(n-1)/b,mod=(n-1)%b;
        string s=to_string(base+num);
        return s[mod]-'0';
    }
};
