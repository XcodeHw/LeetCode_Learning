
/*******************/



Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7


/*************/

class Solution {
public:
	vector<vector<int>>levelOrderBottom(TreeNode *root) {
		int depth = getHeight(root);
		vector<vector<int>> result(depth);
		if (depth == 0) {
			return result;
		}
		dfs(result, result.size() - 1, root); 
		return result;
	}
	void dfs(vector<vector<int>>&result, int height, TreeNode*root) {
		if (root == NULL) {
			return;
		}
		result[height].push_back(root->val);
		dfs(result, height - 1, root->left);
		dfs(result, height - 1, root->right);
	}
	int getHeight(TreeNode* root) {
		if (root == NULL) {
			return 0;
		}
		int t1 = getHeight(root->left);
		int t2 = getHeight(root->right);
		return (t1 > t2 ? t1 : t2) + 1;
	}
};

///queue is a little simple 
class Solution {
public:
	vector<vector<int> > levelOrderBottom(TreeNode *root) {
		vector<vector<int> > result;
		if (root == NULL) return result;

		queue<TreeNode*> q;
		q.push(root);
		while (!q.empty()) {
			vector<int> temp;
			int size = q.size();
			for (int i = 0; i < size; ++i) {
				TreeNode *t = q.front();
				q.pop();
				temp.push_back(t->val);
				if (t->left) q.push(t->left);
				if (t->right) q.push(t->right);
			}
			res.insert(result.begin(), temp);
		}
		return result;
	}
};
