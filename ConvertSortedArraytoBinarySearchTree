Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	TreeNode * sortedArrayToBST(vector<int>&nums) {
		TreeNode *root = NULL;
		if (nums.empty()) {
			return root;
		}
		int mid;
		
		mid = nums.size() / 2;
		root = new TreeNode{ nums[mid] };
		vector<int>nums_left(nums.begin(), nums.begin() + mid);
		vector<int>nums_right(nums.begin()+mid+1, nums.end());
		TreeNode *rLeft = sortedArrayToBST(nums_left );
		TreeNode *rRight = sortedArrayToBST(nums_right);
		root->left = rLeft;
		root->right =rRight;
		return root;
	}
	
	
};
/**************************************/
You know
In fact, this is a divide and conquer algorithm.

