/*************************************/
Given an n-ary tree, return the preorder traversal of its nodes' values.

For example, given a 3-ary tree:

 



 

Return its preorder traversal as: [1,3,5,6,2,4].

 
/*************************************/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
private:
	vector<int>res;
public:
	vector<int>preorder(Node*root) {
	if(root==NULL){
        return res;
    }
		if (root) {
			res.push_back(root->val);
		}
		for (int i = 0; i < root->children.size(); i++) {
			
			preorder(root->children[i]);
		}
		return res;
	}
};

//非递归
 vector<int> preorder(Node* root) {
        if (!root) return {};
        vector<int> vector;
        stack<Node*> s{{ root }};
        while (!s.empty()) {
            Node *node = s.top();
            s.pop();
            vector.push_back(node->val);
            for (int i = node->children.size() - 1; i >= 0; i --) {
                s.push(node->children[i]);
            }
        }
        return vector;
    }
