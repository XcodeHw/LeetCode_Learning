
Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
/***************/

class Solution {
public:
	int strStr(string haystack, string needle) {
		if (needle.empty() && haystack.empty()) {
			return 0;
		}
		else if (haystack.empty()) {
			return -1;
		}
		else if (needle.empty()) {
			return 0;
		}
        if(needle.size()>haystack.size()){
            return -1;
        }
		int hsize = haystack.size();
		int nsize = needle.size();

		for (int i = 0; i < hsize; i++) {
			if (haystack[i] == needle[0]) {
				for (int j = 0; j < nsize; j++) {
					if (haystack[i + j] != needle[j]) {
						break;
					}
					if (j == (nsize - 1)) {
						return i;
					}
				}
			}
		}
		return -1;
    }
};
/*****************/
but i find the  function of string can   be a better solution to the question
/*****************/
class Solution {
public:
	int strStr(string haystack, string needle) {
		if (needle.empty() && haystack.empty()) {
			return 0;
		}
		else if (haystack.empty()) {
			return -1;
		}
		else if (needle.empty()) {
			return 0;
		}

		if (haystack.size() < needle.size()) {
			return -1;
		}
		if (haystack == needle) {
			return 0;
		}
int r = -1;
		int nsize = needle.size();
		int hsize = haystack.size();

		for (int i = 0; i < hsize; i++) {

			if ((i + nsize) > hsize) {
				break;
			}
			else {
				if (needle == haystack.substr(i, nsize)) {
					r = i;
				}
			}
		}
		return r;
	}

};
