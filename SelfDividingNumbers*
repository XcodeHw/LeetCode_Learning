/*********************************************/
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.

/********************************************/

class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right)
    {
        int num1,num2,i;
        vector<int>result;
        for(i=left;i<=right;i++)
        {
            int flag=0;
            num1=i/10;
            num2=i%10;
            if(num2==0)
                flag=1;
            while(num2!=0||num1!=0)
            {   
                if(num2==0||i%num2!=0)
                {
                  flag=1;
                  break;   
                }
                num2=num1%10;
                num1=num1/10;
            }
            if(flag==0)
                result.push_back(i);      
        }
        return result;
    }
};
