/**********************************/
A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.
Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

/*********************************/
class Solution {
public:
	vector<string>readBinaryWatch(int num) {
		vector<string>re;
		
		
		for (int i = 0; i <= 11; i++) {
			int count =totalOne(i);
			
		
			
			if (count <= num) {
				
				for (int j = 0; j <= 59; j++) {
				
					int count2 = totalOne(j);
					
					
					if (count2 == num - count) {
						if (j < 10) {
							re.push_back(to_string(i) + ":" + "0"+to_string(j));
						}
						else {
							re.push_back(to_string(i) + ":" + to_string(j));
						}
					}
					
				}
			}
		}
			return re;
	}


	int totalOne(int n) {
		int count = 0;
		while (n > 0) {
			if (n % 2 == 1) {
				count++;
			}
			n = n / 2;
	}
		return count;
	}
};
