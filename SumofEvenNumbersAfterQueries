/*********************************/
We have an array A of integers, and an array queries of queries.

For the i-th query val = queries[i][0], index = queries[i][1], we add val to A[index].  Then, the answer to the i-th query is the sum of the even values of A.

(Here, the given index = queries[i][1] is a 0-based index, and each query permanently modifies the array A.)

Return the answer to all queries.  Your answer array should have answer[i] as the answer to the i-th query.

 

Example 1:

Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: 
At the beginning, the array is [1,2,3,4].
After adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.
 


/*********************************/
class Solution {
public:
    vector<int> sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {
        
	int Asize = A.size();
		int Qsize = queries.size();
		vector<int>res;
		int oldsum = 0;
		for (int i = 0; i < Asize; i++) {
			if (A[i] % 2 == 0) {
				oldsum = oldsum + A[i];
			}
		}
		for (int i = 0; i < Qsize; i++) {
			int sum = oldsum;
			int index = queries[i][1];
			int value = queries[i][0];
			
			if (A[index] % 2 == 0 && (value + A[index]) % 2 == 0) {
				sum = oldsum + value;
			}
			if (A[index] % 2 == 0 && (value + A[index]) % 2 != 0) {
				sum = oldsum - A[index];
			}
			if (A[index] % 2 != 0 && (value + A[index]) % 2 == 0) {
				sum = oldsum + value + A[index];
			}
			A[index] = A[index] + value;

		
			res.push_back(sum);
			oldsum = sum;
		}
		return res;
	}
};
