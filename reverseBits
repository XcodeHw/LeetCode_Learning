//**************************//
Reverse bits of a given 32 bits unsigned integer.

Example:

Input: 43261596
Output: 964176192
Explanation: 43261596 represented in binary as 00000010100101000001111010011100, 
             return 964176192 represented in binary as 00111001011110000010100101000000.
Follow up:
If this function is called many times, how would you optimize it?
//***************************///



class Solution {
public:
	uint32_t reverseBits(uint32_t n) {
		vector<int>result;
		int count = 0;
		while (n > 0) {
			int temp = n / 2;
			int temp2 = n % 2;
			count++;
			result.push_back(temp2);

			n = temp;
			
		}
		for (int i = 0; i < 32-count; i++) {
			result.push_back(0);
		}
		
		int size = result.size();
		uint32_t sum = 0;
		for (int i = 0; i <32; i++) {
			
			sum = sum + result[i] * pow(2, 32-1-i);
		}
		
		return sum;
	}
};
