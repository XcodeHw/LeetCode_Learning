/*******************************/
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3
/*****************************************************/
class Solution {
public:
	vector<string>binaryTreePaths(TreeNode *root) {
		vector<string>result;
		if (root == NULL) {
			return result;
		}
		if (root->left == NULL && root->right == NULL) {
			result.push_back(to_string(root->val));
		}
		vector<string> leftS = binaryTreePaths(root->left);
		for (int i = 0; i < leftS.size(); i++)
			result.push_back(to_string(root->val) + "->" + leftS[i]);
		vector<string> rihgtS = binaryTreePaths(root->right);
		for (int i = 0; i < rihgtS.size(); i++)
			result.push_back(to_string(root->val) + "->" + rihgtS[i]);
		return result;
	}

	
};
//差一点就错了，唉有时候不能复杂
