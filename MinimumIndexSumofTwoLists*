/**********************************************/
Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).


/*********************************************/
class Solution {
public:
	vector<string>findRestaurant(vector<string>&list1, vector<string>&list)
	{
		map<string, int>temp;
		vector<string>res;
		int size1 = list1.size();
		int size2 = list.size();
		for (int i = 0; i < size1; i++) {
			
				temp.insert(pair<string, int>(list1[i], i));
			
		}
		int sum = size1+size2;
		
		for (int i = 0; i < size2; i++) {
			if (temp.count(list[i]) != 0) {
				if (i + temp[list[i]] <= sum) {
					sum = i + temp[list[i]];
					
					
				}
			}
		}
		for (int i = 0; i < size2; i++) {
			if (temp.count(list[i]) != 0) {
				if (i + temp[list[i]] == sum) {
					res.push_back(list[i]);
				}
			}
		}
		
		return res;
	}
};
/////////////////////////////////////////////////////
