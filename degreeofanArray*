/****************************************************************/
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6


/***************************************************************/
class Solution {
public:
    
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int,int> m;
        int max_freq=0;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
            max_freq = std::max(m[nums[i]],max_freq);
        }
        unordered_map<int,int>::iterator t;
        int min=INT_MAX;
        int left=0;
        int right=nums.size()-1;
        for(t=m.begin();t!=m.end();t++)
        {
            if(t->second!=max_freq) continue;
            left=0;
            right=nums.size()-1;
            while(nums[left]!=t->first) left++;
            while(nums[right]!=t->first) right--;
            min=std::min(min,right-left+1);
        }
        return min;
   
    }
};
