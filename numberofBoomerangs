/**********************************/

Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).

Example:
Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]

/********************************/
class Solution {
public:
	int numberOfBoomerangs(vector<pair<int, int>>& points) {
		long size = points.size();
		if (size== 0 || size == 1)
			return 0;
		map<int, int> distance;
		int count = 0, x, y;
		for (int i = 0; i < size; i++) {
			for (int j = 0; j <size; j++) {
				x = points[i].first - points[j].first; y = points[i].second - points[j].second;
				distance[x*x + y * y]++;
			}
			for (auto it : distance)
				count += it.second * (it.second - 1);
			distance.clear();
		}
		return count;
	}

};

